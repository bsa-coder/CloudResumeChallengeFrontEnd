# this is a basic workflow

name: CI and CD

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
env:
  NEW_HTML: false
  CHANGED_FILES: ""
  INDEX_NAME: ""
    
jobs:
#   job1:
#     runs-on: ubuntu-latest
# #     needs: [build]
#     # Map a step output to a job output
#     outputs:
#       junk: ${{ steps.step1.outputs.testj }}
#       output1: ${{ steps.step1.outputs.test }}
#       output2: ${{ steps.step2.outputs.test }}
#       matrix1: ${{ steps.step1.outputs.matrix1 }}
#       matrix2: ${{ steps.step3.outputs.matrix2 }}
#     steps:
#     - name: step1name
#       id: step1
#       run: |
#         echo "::set-output name=test::hello"
#         echo "::set-output name=testj::hello"
#         echo "::set-output name=matrix1::{\"\"IndexDocument\"\": { \"\"Suffix\"\": \"\"${{ needs.check_html.outputs.html_file }}\"\" },\"\"ErrorDocument\"\": { \"\"Key\"\": \"\"error.html\"\"}}"
#         echo "CHANGED_FILES={\\\"IndexDocument\\\": { \\\"Suffix\\\": \\\"${{ needs.check_html.outputs.html_file }}\\\" },\\\"ErrorDocument\\\": { \\\"Key\\\": \\\"error.html\\\"}}" >> $GITHUB_ENV
#     - name: step2name
#       id: step2
#       run: |
#         echo "::set-output name=test::world"
#         echo changed files = ${{ env.CHANGED_FILES }}
# #        echo "CHANGED_FILES=step2" >> $GITHUB_ENV
#     - id: step3
#       run: |
#         echo needs ${{needs.job1.outputs.junk}} ${{needs.job1.outputs.output1}} ${{needs.job1.outputs.output2}}
#         echo steps ${{steps.job1.outputs.junk}} ${{steps.job1.outputs.output1}} ${{steps.job1.outputs.output2}}
#         echo changed files = ${{ env.CHANGED_FILES }}
#         echo "::set-output name=matrix2::${{ toJson(env.CHANGED_FILES) }}"
#        echo "CHANGED_FILES=step3" >> $GITHUB_ENV
#   job2:
#     runs-on: ubuntu-latest
#     needs: job1
#     steps:
#       - name: job2stepname
#         run: |
#           echo needs ${{needs.job1.outputs.junk}} ${{needs.job1.outputs.output1}} ${{needs.job1.outputs.output2}}
#           echo raw1 = ${{needs.job1.outputs.matrix1}}
#           echo raw2 = ${{needs.job1.outputs.matrix2}}
#           echo changed files = ${{ env.CHANGED_FILES }}
#       - name: job2step2
#         run: |
#           echo job2step2 changed files = ${{ env.CHANGED_FILES }}
# #          echo steps fromJson = ${{fromJson(steps.job1.outputs.matrix1)}}


  get-file-changes:
    runs-on: ubuntu-latest    
    outputs:
      theChanges: ${{steps.echo_files.outputs.files }}
      new_html: ${{steps.check_for_html.outputs.new_html}}
      new_html2: ${{steps.check_for_yaml.outputs.new_html}}
    steps:
    - name: Get file changes
      id: get_file_changes
      uses: trilom/file-changes-action@v1.2.3
      with:
        output: ‘ ‘
        fileOutput: ' '
        
    - name: Echo file changes
      id: echo_files
      run: |
        echo "::set-output name=files::${{steps.get_file_changes.outputs.files}}
        echo Changed Files: ${{steps.get_file_changes.outputs.files }}
        echo all: '${{ steps.get_file_changes.outputs.files}}'
        echo mod: '${{ steps.get_file_changes.outputs.files_modified}}'
        echo new: '${{ steps.get_file_changes.outputs.files_added}}'
        echo rem: '${{ steps.get_file_changes.outputs.files_removed}}'
        echo the files are ... ${{needs.get-file-changes.outputs.theChanges}}
        echo new html is ${{needs.get-file-changes.outputs.new_html}}

    - name: check the results yml DUMMY ACTION TO BE REMOVED
      id: check_for_yaml
      if: contains(steps.get_file_changes.outputs.files, 'yml')
      run: |
        echo "::set-output name=new_html::true"
        echo trilom files: ${{steps.get_file_changes.outputs.files }}
        echo duplic files: ${{needs.get-file-changes.outputs.theChanges}}
        
    - name: check the results html
      id: check_for_html
      if: contains(steps.get_file_changes.outputs.files, 'ResumeScottAlexander.html')
      run: |
        echo "::set-output name=new_html::true"
        echo trilom files: ${{steps.get_file_changes.outputs.files }}
        echo duplic files: ${{needs.get-file-changes.outputs.theChanges}}
        echo new html is ${{needs.get-file-changes.outputs.new_html}}


  copy-files-to-s3:
    runs-on: ubuntu-latest
    needs: [get-file-changes]
    steps:
    - name: test an output
      run: |
        echo the files are ... ${{needs.get-file-changes.outputs.theChanges}}
        echo new html is ${{needs.get-file-changes.outputs.new_html}}
        echo new html2 is ${{needs.get-file-changes.outputs.new_html2}}
    - name: Check out the master repo
      uses: actions/checkout@master
    - name: Use docker to sync the REPO with the S3
      uses: docker://amazon/aws-cli:2.0.7
      env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-east-1'   # optional: defaults to us-east-1
      with:
          args: s3 sync . s3://${{ secrets.AWS_S3_BUCKET }}/ --exclude *
#           args: s3 sync . s3://${{ secrets.AWS_S3_BUCKET }}/ --exclude Resume*.html

#   copy-html-to-s3:
#     runs-on: ubuntu-latest
#     needs: [get-file-changes, copy-files-to-s3]
#     outputs:
#       new_index: ${{ steps.new_index.outputs.new_index }}
#     steps:
#     - name: are there html files
#       run: echo new html is ${{needs.get-file-changes.outputs.new_html}} index_name = ${{ env.INDEX_NAME }}
#     - name: Get current date
#       if: needs.get-file-changes.outputs.new_html == true
#       id: date
#       run: echo "::set-output name=date::$(date +'%Y-%m-%d-%T')"
#     - name: Test with environment variables
#       if: needs.get-file-changes.outputs.new_html == true
#       run: |
#         echo $L_TAG_NAME - $L_RELEASE_NAME
#         echo "INDEX_NAME=ResumeScottAlexander-${{ steps.date.outputs.date }}.html" >> $GITHUB_ENV
#       env:
#         L_TAG_NAME: ResumeScottAlexander-${{ steps.date.outputs.date }}.html
#         L_RELEASE_NAME: release-${{ steps.date.outputs.date }}
#     - name: Set index name
#       if: needs.get-file-changes.outputs.new_html == true
#       id: new_index
#       run: |
#         echo "::set-output name=new_index::ResumeScottAlexander-${{ steps.date.outputs.date }}.html"
#     - name: Check out the master repo
#       if: needs.get-file-changes.outputs.new_html == true
#       uses: actions/checkout@master
#     - name: Use docker to sync the REPO with the S3
#       if: needs.get-file-changes.outputs.new_html == true
#       uses: docker://amazon/aws-cli:2.0.7
#       env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_REGION: 'us-east-1'   # optional: defaults to us-east-1
#       with:
#           args: s3 cp ResumeScottAlexander.html s3://${{ secrets.AWS_S3_BUCKET }}/${{ env.INDEX_NAME }} --exclude * --include Resume*.html

#   update_s3_site:
#     runs-on: ubuntu-latest
#     needs: [copy-html-to-s3, get-file-changes]
#     steps:
#     - name: Use docker to Update website configuration
#       if: needs.get-file-changes.outputs.new_html == true
#       uses: docker://amazon/aws-cli:2.0.7
#       env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_REGION: 'us-east-1'   # optional: defaults to us-east-1
#       with:
#           args: s3 website ${{ secrets.AWS_S3_BUCKET }} --index-document ${{needs.copy-html-to-s3.outputs.new_index}}
# #           args: s3api put-bucket-website --bucket ${{ secrets.AWS_S3_BUCKET }} --website-configuration ${{needs.check_html.outputs.matrix2}}

